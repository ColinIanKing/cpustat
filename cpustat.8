.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH CPUSTAT 8 "November 15, 2021"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
cpustat \- a tool to measure CPU utilization.
.br

.SH SYNOPSIS
.B cpustat
[ options ]
.RI [ delay " [" count ]]
.br

.SH DESCRIPTION
cpustat is a program that dumps the CPU utilization of current running tasks
(that is, processes or kernel threads).  cpustat is useful to monitor the
activity of long lived processes in a system, such as daemons,
kernel threads as well as typical user processes.
.P
cpustat shows only the tasks that have measured
any change in their CPU activity between each sample interval (as indicated
by an increment in the CPU tick count stats of utime and stime in
/proc/$pid/stat).  cpustat thus only reports activity of busy tasks that are
still alive at the time of each sample snapshot and hence will not account
for very short lived processes that exist between each sample period.
.P
For each running task that has consumed some CPU during the sample time, the
following information is displayed:
.TS
lBw(10) lBw(50)
l l.
Heading	T{
Description
T}
%CPU	T{
Total CPU used (in percent)
T}
%USR	T{
CPU used in user space (in percent)
T}
%SYS	T{
CPU used in system (kernel) space (in percent)
T}
PID	T{
Process ID
T}
S	T{
Process State
T}
CPU	T{
CPU used by the process at time of sampling.
T}
Time	T{
Total CPU time used by the process since it started.
T}
Task	T{
Process command line information (from process cmdline or comm fields)
T}
.TE
.P
cpustat was designed to try and minimize the CPU overhead of process statistics
gathering and reporting. It is therefore ideal for small embedded devices where
CPU is limited where measuring CPU utilisation may affect the overall
CPU statistics. For this reason, it is not as complex as tools such as top(1)
that have a more feature rich user interface.
.SH PROCESS STATE CODES
.TS
l l.
R	Running
S	Sleeping
D	Waiting, Disk Sleep
T	Stopped
t	Tracing stopped
W	Paging
X or x	Dead
K	Wakekill
W	Waking
P	Parked
.TE
.SH OPTIONS
cpustat options are as follow:
.TP
.B \-a
calculate CPU utilisation based on all CPUs. For example, if a process
is using 100% of 1 CPU and the system has 4 CPUs, then the utilisation
will show as 25%.  The default is to show utilisation on a per CPU
basis.
.TP
.B \-c
get command information from process comm field.
.TP
.B \-d
strip directory basename off command information.
.TP
.B \-D
compute and show the distribution of CPU utilisation by task and by CPU.
.br
By task, this breaks the CPU utilisation of each task into 20 ranges from minimum to the maximum and shows the count of tasks found at in that paricular utilisation range.  Useful to see any outliers and to characterize the typical per task usage of the CPU.
.br
By CPU, this shows the user and system CPU utilisation by per CPU.
.TP
.B \-g
show grand total of CPU utilisation statistics at the end of the run. This is the
total cumulatave CPU used by each process, averaged over the entire run duration.
.TP
.B \-h
show help.
.TP
.B \-i
ignore cpustat in the statistics.
.TP
.B \-l
show long (full) command information.
.TP
.B \-n task_count
only display the first task_count number of top tasks.
.TP
.B \-p PID
only display process that matches the given PID.
.TP
.B \-q 
run quietly, only really makes sense with -r option.
.TP
.B \-r csv_file
output gathered data in a comma separated values file. This
can be then imported and graphed using your favourite open
source spread sheet. The %CPU utilisation (system and user) for
each process at each sample time is output into a table.
.TP
.B \-s
show short command information.
.TP
.B \-S
show time stamp. If the \-r option is used then an extra column
appears in the CSV output file with the time of day for each sample.
.TP
.B \-t threshold
ignore samples where the CPU usage delta per second less than the given threshold.
.TP
.B \-T
calculate total CPU utilisation.
.TP
.B \-x
show extra CPU related statistics, namely: CPU load average over 1, 5 and 10 minutes, CPU frequency (average of all online CPU frequencies), number of CPUs online.
.TP
.B \-X
run in curses based "top" like mode; this will make cpustat consume more CPU cycles as
it adds on more display handling overhead.
.SH EXAMPLES
.LP
cpustat
.IP
Dump CPU stats every second until stopped.
.LP
cpustat \-n 20 60
.IP
Dump the top 20 CPU consuming tasks every 60 seconds until stopped.
.LP
cpustat 10 5
.IP
Dump CPU stats every 10 seconds just 5 times.
.LP
cpustat \-x \-D \-a 1 300
.IP
Gather stats every second for 5 minutes with extra CPU stats and show CPU utilisation distributions per task and per CPU at the end of the run. Also, scale CPU utilisation by the number of CPUs so that 100% utilisation means 100% of all CPUs rather than 100% of 1 CPU.
.SH SEE ALSO
.BR forkstat (8),
.BR eventstat (8),
.BR vmstat (8),
.BR top (1)
.SH AUTHOR
cpustat was written by Colin Ian King <colin.i.king@gmail.com>
.PP
This manual page was written by Colin Ian King <colin.i.king@gmail.com>,
for the Ubuntu project (but may be used by others).
.SH COPYRIGHT
Copyright \(co 2011-2021 Canonical Ltd, Copyright \(co 2021 Colin Ian King
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
